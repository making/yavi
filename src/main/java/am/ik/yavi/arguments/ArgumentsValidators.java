/*
 * Copyright (C) 2018-2021 Toshiaki Maki <makingx@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package am.ik.yavi.arguments;

import am.ik.yavi.fn.Function2;
import am.ik.yavi.fn.Function3;
import am.ik.yavi.fn.Function4;
import am.ik.yavi.fn.Function5;
import am.ik.yavi.fn.Function6;
import am.ik.yavi.fn.Function7;
import am.ik.yavi.fn.Function8;
import am.ik.yavi.fn.Function9;
import am.ik.yavi.fn.Function10;
import am.ik.yavi.fn.Validations;

/**
 * Generated by https://github.com/making/yavi/blob/develop/scripts/generate-args.sh
 *
 * @since 0.7.0
 */
public class ArgumentsValidators {

	public static <A1, A2, R1, R2, X> Arguments2Validator<A1, A2, X> split2(
			Arguments1Validator<A1, R1> v1, Arguments1Validator<A2, R2> v2,
			Function2<? super R1, ? super R2, ? extends X> f) {
		return (a1, a2, locale, constraintGroup) -> Validations.apply(f::apply,
				v1.validate(a1, locale, constraintGroup),
				v2.validate(a2, locale, constraintGroup));
	}

	public static <A1, A2, A3, R1, R2, R3, X> Arguments3Validator<A1, A2, A3, X> split3(
			Arguments1Validator<A1, R1> v1, Arguments1Validator<A2, R2> v2,
			Arguments1Validator<A3, R3> v3,
			Function3<? super R1, ? super R2, ? super R3, ? extends X> f) {
		return (a1, a2, a3, locale, constraintGroup) -> Validations.apply(f::apply,
				v1.validate(a1, locale, constraintGroup),
				v2.validate(a2, locale, constraintGroup),
				v3.validate(a3, locale, constraintGroup));
	}

	public static <A1, A2, A3, A4, R1, R2, R3, R4, X> Arguments4Validator<A1, A2, A3, A4, X> split4(
			Arguments1Validator<A1, R1> v1, Arguments1Validator<A2, R2> v2,
			Arguments1Validator<A3, R3> v3, Arguments1Validator<A4, R4> v4,
			Function4<? super R1, ? super R2, ? super R3, ? super R4, ? extends X> f) {
		return (a1, a2, a3, a4, locale, constraintGroup) -> Validations.apply(f::apply,
				v1.validate(a1, locale, constraintGroup),
				v2.validate(a2, locale, constraintGroup),
				v3.validate(a3, locale, constraintGroup),
				v4.validate(a4, locale, constraintGroup));
	}

	public static <A1, A2, A3, A4, A5, R1, R2, R3, R4, R5, X> Arguments5Validator<A1, A2, A3, A4, A5, X> split5(
			Arguments1Validator<A1, R1> v1, Arguments1Validator<A2, R2> v2,
			Arguments1Validator<A3, R3> v3, Arguments1Validator<A4, R4> v4,
			Arguments1Validator<A5, R5> v5,
			Function5<? super R1, ? super R2, ? super R3, ? super R4, ? super R5, ? extends X> f) {
		return (a1, a2, a3, a4, a5, locale, constraintGroup) -> Validations.apply(
				f::apply, v1.validate(a1, locale, constraintGroup),
				v2.validate(a2, locale, constraintGroup),
				v3.validate(a3, locale, constraintGroup),
				v4.validate(a4, locale, constraintGroup),
				v5.validate(a5, locale, constraintGroup));
	}

	public static <A1, A2, A3, A4, A5, A6, R1, R2, R3, R4, R5, R6, X> Arguments6Validator<A1, A2, A3, A4, A5, A6, X> split6(
			Arguments1Validator<A1, R1> v1, Arguments1Validator<A2, R2> v2,
			Arguments1Validator<A3, R3> v3, Arguments1Validator<A4, R4> v4,
			Arguments1Validator<A5, R5> v5, Arguments1Validator<A6, R6> v6,
			Function6<? super R1, ? super R2, ? super R3, ? super R4, ? super R5, ? super R6, ? extends X> f) {
		return (a1, a2, a3, a4, a5, a6, locale, constraintGroup) -> Validations.apply(
				f::apply, v1.validate(a1, locale, constraintGroup),
				v2.validate(a2, locale, constraintGroup),
				v3.validate(a3, locale, constraintGroup),
				v4.validate(a4, locale, constraintGroup),
				v5.validate(a5, locale, constraintGroup),
				v6.validate(a6, locale, constraintGroup));
	}

	public static <A1, A2, A3, A4, A5, A6, A7, R1, R2, R3, R4, R5, R6, R7, X> Arguments7Validator<A1, A2, A3, A4, A5, A6, A7, X> split7(
			Arguments1Validator<A1, R1> v1, Arguments1Validator<A2, R2> v2,
			Arguments1Validator<A3, R3> v3, Arguments1Validator<A4, R4> v4,
			Arguments1Validator<A5, R5> v5, Arguments1Validator<A6, R6> v6,
			Arguments1Validator<A7, R7> v7,
			Function7<? super R1, ? super R2, ? super R3, ? super R4, ? super R5, ? super R6, ? super R7, ? extends X> f) {
		return (a1, a2, a3, a4, a5, a6, a7, locale, constraintGroup) -> Validations.apply(
				f::apply, v1.validate(a1, locale, constraintGroup),
				v2.validate(a2, locale, constraintGroup),
				v3.validate(a3, locale, constraintGroup),
				v4.validate(a4, locale, constraintGroup),
				v5.validate(a5, locale, constraintGroup),
				v6.validate(a6, locale, constraintGroup),
				v7.validate(a7, locale, constraintGroup));
	}

	public static <A1, A2, A3, A4, A5, A6, A7, A8, R1, R2, R3, R4, R5, R6, R7, R8, X> Arguments8Validator<A1, A2, A3, A4, A5, A6, A7, A8, X> split8(
			Arguments1Validator<A1, R1> v1, Arguments1Validator<A2, R2> v2,
			Arguments1Validator<A3, R3> v3, Arguments1Validator<A4, R4> v4,
			Arguments1Validator<A5, R5> v5, Arguments1Validator<A6, R6> v6,
			Arguments1Validator<A7, R7> v7, Arguments1Validator<A8, R8> v8,
			Function8<? super R1, ? super R2, ? super R3, ? super R4, ? super R5, ? super R6, ? super R7, ? super R8, ? extends X> f) {
		return (a1, a2, a3, a4, a5, a6, a7, a8, locale, constraintGroup) -> Validations
				.apply(f::apply, v1.validate(a1, locale, constraintGroup),
						v2.validate(a2, locale, constraintGroup),
						v3.validate(a3, locale, constraintGroup),
						v4.validate(a4, locale, constraintGroup),
						v5.validate(a5, locale, constraintGroup),
						v6.validate(a6, locale, constraintGroup),
						v7.validate(a7, locale, constraintGroup),
						v8.validate(a8, locale, constraintGroup));
	}

	public static <A1, A2, A3, A4, A5, A6, A7, A8, A9, R1, R2, R3, R4, R5, R6, R7, R8, R9, X> Arguments9Validator<A1, A2, A3, A4, A5, A6, A7, A8, A9, X> split9(
			Arguments1Validator<A1, R1> v1, Arguments1Validator<A2, R2> v2,
			Arguments1Validator<A3, R3> v3, Arguments1Validator<A4, R4> v4,
			Arguments1Validator<A5, R5> v5, Arguments1Validator<A6, R6> v6,
			Arguments1Validator<A7, R7> v7, Arguments1Validator<A8, R8> v8,
			Arguments1Validator<A9, R9> v9,
			Function9<? super R1, ? super R2, ? super R3, ? super R4, ? super R5, ? super R6, ? super R7, ? super R8, ? super R9, ? extends X> f) {
		return (a1, a2, a3, a4, a5, a6, a7, a8, a9, locale,
				constraintGroup) -> Validations.apply(f::apply,
						v1.validate(a1, locale, constraintGroup),
						v2.validate(a2, locale, constraintGroup),
						v3.validate(a3, locale, constraintGroup),
						v4.validate(a4, locale, constraintGroup),
						v5.validate(a5, locale, constraintGroup),
						v6.validate(a6, locale, constraintGroup),
						v7.validate(a7, locale, constraintGroup),
						v8.validate(a8, locale, constraintGroup),
						v9.validate(a9, locale, constraintGroup));
	}

	public static <A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, X> Arguments10Validator<A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, X> split10(
			Arguments1Validator<A1, R1> v1, Arguments1Validator<A2, R2> v2,
			Arguments1Validator<A3, R3> v3, Arguments1Validator<A4, R4> v4,
			Arguments1Validator<A5, R5> v5, Arguments1Validator<A6, R6> v6,
			Arguments1Validator<A7, R7> v7, Arguments1Validator<A8, R8> v8,
			Arguments1Validator<A9, R9> v9, Arguments1Validator<A10, R10> v10,
			Function10<? super R1, ? super R2, ? super R3, ? super R4, ? super R5, ? super R6, ? super R7, ? super R8, ? super R9, ? super R10, ? extends X> f) {
		return (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, locale,
				constraintGroup) -> Validations.apply(f::apply,
						v1.validate(a1, locale, constraintGroup),
						v2.validate(a2, locale, constraintGroup),
						v3.validate(a3, locale, constraintGroup),
						v4.validate(a4, locale, constraintGroup),
						v5.validate(a5, locale, constraintGroup),
						v6.validate(a6, locale, constraintGroup),
						v7.validate(a7, locale, constraintGroup),
						v8.validate(a8, locale, constraintGroup),
						v9.validate(a9, locale, constraintGroup),
						v10.validate(a10, locale, constraintGroup));
	}

	public static <A, R1, R2, X> Arguments1Validator<A, X> map2(
			Arguments1Validator<A, R1> v1, Arguments1Validator<A, R2> v2,
			Function2<? super R1, ? super R2, ? extends X> f) {
		return (a, locale, constraintGroup) -> Validations.apply(f::apply,
				v1.validate(a, locale, constraintGroup),
				v2.validate(a, locale, constraintGroup));
	}

	public static <A, R1, R2, R3, X> Arguments1Validator<A, X> map3(
			Arguments1Validator<A, R1> v1, Arguments1Validator<A, R2> v2,
			Arguments1Validator<A, R3> v3,
			Function3<? super R1, ? super R2, ? super R3, ? extends X> f) {
		return (a, locale, constraintGroup) -> Validations.apply(f::apply,
				v1.validate(a, locale, constraintGroup),
				v2.validate(a, locale, constraintGroup),
				v3.validate(a, locale, constraintGroup));
	}

	public static <A, R1, R2, R3, R4, X> Arguments1Validator<A, X> map4(
			Arguments1Validator<A, R1> v1, Arguments1Validator<A, R2> v2,
			Arguments1Validator<A, R3> v3, Arguments1Validator<A, R4> v4,
			Function4<? super R1, ? super R2, ? super R3, ? super R4, ? extends X> f) {
		return (a, locale, constraintGroup) -> Validations.apply(f::apply,
				v1.validate(a, locale, constraintGroup),
				v2.validate(a, locale, constraintGroup),
				v3.validate(a, locale, constraintGroup),
				v4.validate(a, locale, constraintGroup));
	}

	public static <A, R1, R2, R3, R4, R5, X> Arguments1Validator<A, X> map5(
			Arguments1Validator<A, R1> v1, Arguments1Validator<A, R2> v2,
			Arguments1Validator<A, R3> v3, Arguments1Validator<A, R4> v4,
			Arguments1Validator<A, R5> v5,
			Function5<? super R1, ? super R2, ? super R3, ? super R4, ? super R5, ? extends X> f) {
		return (a, locale, constraintGroup) -> Validations.apply(f::apply,
				v1.validate(a, locale, constraintGroup),
				v2.validate(a, locale, constraintGroup),
				v3.validate(a, locale, constraintGroup),
				v4.validate(a, locale, constraintGroup),
				v5.validate(a, locale, constraintGroup));
	}

	public static <A, R1, R2, R3, R4, R5, R6, X> Arguments1Validator<A, X> map6(
			Arguments1Validator<A, R1> v1, Arguments1Validator<A, R2> v2,
			Arguments1Validator<A, R3> v3, Arguments1Validator<A, R4> v4,
			Arguments1Validator<A, R5> v5, Arguments1Validator<A, R6> v6,
			Function6<? super R1, ? super R2, ? super R3, ? super R4, ? super R5, ? super R6, ? extends X> f) {
		return (a, locale, constraintGroup) -> Validations.apply(f::apply,
				v1.validate(a, locale, constraintGroup),
				v2.validate(a, locale, constraintGroup),
				v3.validate(a, locale, constraintGroup),
				v4.validate(a, locale, constraintGroup),
				v5.validate(a, locale, constraintGroup),
				v6.validate(a, locale, constraintGroup));
	}

	public static <A, R1, R2, R3, R4, R5, R6, R7, X> Arguments1Validator<A, X> map7(
			Arguments1Validator<A, R1> v1, Arguments1Validator<A, R2> v2,
			Arguments1Validator<A, R3> v3, Arguments1Validator<A, R4> v4,
			Arguments1Validator<A, R5> v5, Arguments1Validator<A, R6> v6,
			Arguments1Validator<A, R7> v7,
			Function7<? super R1, ? super R2, ? super R3, ? super R4, ? super R5, ? super R6, ? super R7, ? extends X> f) {
		return (a, locale, constraintGroup) -> Validations.apply(f::apply,
				v1.validate(a, locale, constraintGroup),
				v2.validate(a, locale, constraintGroup),
				v3.validate(a, locale, constraintGroup),
				v4.validate(a, locale, constraintGroup),
				v5.validate(a, locale, constraintGroup),
				v6.validate(a, locale, constraintGroup),
				v7.validate(a, locale, constraintGroup));
	}

	public static <A, R1, R2, R3, R4, R5, R6, R7, R8, X> Arguments1Validator<A, X> map8(
			Arguments1Validator<A, R1> v1, Arguments1Validator<A, R2> v2,
			Arguments1Validator<A, R3> v3, Arguments1Validator<A, R4> v4,
			Arguments1Validator<A, R5> v5, Arguments1Validator<A, R6> v6,
			Arguments1Validator<A, R7> v7, Arguments1Validator<A, R8> v8,
			Function8<? super R1, ? super R2, ? super R3, ? super R4, ? super R5, ? super R6, ? super R7, ? super R8, ? extends X> f) {
		return (a, locale, constraintGroup) -> Validations.apply(f::apply,
				v1.validate(a, locale, constraintGroup),
				v2.validate(a, locale, constraintGroup),
				v3.validate(a, locale, constraintGroup),
				v4.validate(a, locale, constraintGroup),
				v5.validate(a, locale, constraintGroup),
				v6.validate(a, locale, constraintGroup),
				v7.validate(a, locale, constraintGroup),
				v8.validate(a, locale, constraintGroup));
	}

	public static <A, R1, R2, R3, R4, R5, R6, R7, R8, R9, X> Arguments1Validator<A, X> map9(
			Arguments1Validator<A, R1> v1, Arguments1Validator<A, R2> v2,
			Arguments1Validator<A, R3> v3, Arguments1Validator<A, R4> v4,
			Arguments1Validator<A, R5> v5, Arguments1Validator<A, R6> v6,
			Arguments1Validator<A, R7> v7, Arguments1Validator<A, R8> v8,
			Arguments1Validator<A, R9> v9,
			Function9<? super R1, ? super R2, ? super R3, ? super R4, ? super R5, ? super R6, ? super R7, ? super R8, ? super R9, ? extends X> f) {
		return (a, locale, constraintGroup) -> Validations.apply(f::apply,
				v1.validate(a, locale, constraintGroup),
				v2.validate(a, locale, constraintGroup),
				v3.validate(a, locale, constraintGroup),
				v4.validate(a, locale, constraintGroup),
				v5.validate(a, locale, constraintGroup),
				v6.validate(a, locale, constraintGroup),
				v7.validate(a, locale, constraintGroup),
				v8.validate(a, locale, constraintGroup),
				v9.validate(a, locale, constraintGroup));
	}

	public static <A, R1, R2, R3, R4, R5, R6, R7, R8, R9, R10, X> Arguments1Validator<A, X> map10(
			Arguments1Validator<A, R1> v1, Arguments1Validator<A, R2> v2,
			Arguments1Validator<A, R3> v3, Arguments1Validator<A, R4> v4,
			Arguments1Validator<A, R5> v5, Arguments1Validator<A, R6> v6,
			Arguments1Validator<A, R7> v7, Arguments1Validator<A, R8> v8,
			Arguments1Validator<A, R9> v9, Arguments1Validator<A, R10> v10,
			Function10<? super R1, ? super R2, ? super R3, ? super R4, ? super R5, ? super R6, ? super R7, ? super R8, ? super R9, ? super R10, ? extends X> f) {
		return (a, locale, constraintGroup) -> Validations.apply(f::apply,
				v1.validate(a, locale, constraintGroup),
				v2.validate(a, locale, constraintGroup),
				v3.validate(a, locale, constraintGroup),
				v4.validate(a, locale, constraintGroup),
				v5.validate(a, locale, constraintGroup),
				v6.validate(a, locale, constraintGroup),
				v7.validate(a, locale, constraintGroup),
				v8.validate(a, locale, constraintGroup),
				v9.validate(a, locale, constraintGroup),
				v10.validate(a, locale, constraintGroup));
	}
}
