/*
 * Copyright (C) 2018-2021 Toshiaki Maki <makingx@gmail.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package am.ik.yavi.fn;

import java.util.ArrayList;
import java.util.List;
import java.util.function.Function;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

/**
 * Generated by
 * https://github.com/making/yavi/blob/develop/scripts/generate-applicative.sh
 *
 * @since 0.6.0
 */
public class Validations {
	public static <E, T1> Composing1<E, T1> compose(Validation<E, T1> v1) {
		return new Composing1<>(v1);
	}

	public static <E, T1, T2> Composing2<E, T1, T2> compose(Validation<E, T1> v1,
			Validation<E, T2> v2) {
		return new Composing2<>(v1, v2);
	}

	public static <E, T1, T2, T3> Composing3<E, T1, T2, T3> compose(Validation<E, T1> v1,
			Validation<E, T2> v2, Validation<E, T3> v3) {
		return new Composing3<>(v1, v2, v3);
	}

	public static <E, T1, T2, T3, T4> Composing4<E, T1, T2, T3, T4> compose(
			Validation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,
			Validation<E, T4> v4) {
		return new Composing4<>(v1, v2, v3, v4);
	}

	public static <E, T1, T2, T3, T4, T5> Composing5<E, T1, T2, T3, T4, T5> compose(
			Validation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,
			Validation<E, T4> v4, Validation<E, T5> v5) {
		return new Composing5<>(v1, v2, v3, v4, v5);
	}

	public static <E, T1, T2, T3, T4, T5, T6> Composing6<E, T1, T2, T3, T4, T5, T6> compose(
			Validation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,
			Validation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6) {
		return new Composing6<>(v1, v2, v3, v4, v5, v6);
	}

	public static <E, T1, T2, T3, T4, T5, T6, T7> Composing7<E, T1, T2, T3, T4, T5, T6, T7> compose(
			Validation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,
			Validation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,
			Validation<E, T7> v7) {
		return new Composing7<>(v1, v2, v3, v4, v5, v6, v7);
	}

	public static <E, T1, T2, T3, T4, T5, T6, T7, T8> Composing8<E, T1, T2, T3, T4, T5, T6, T7, T8> compose(
			Validation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,
			Validation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,
			Validation<E, T7> v7, Validation<E, T8> v8) {
		return new Composing8<>(v1, v2, v3, v4, v5, v6, v7, v8);
	}

	public static <E, T1, T2, T3, T4, T5, T6, T7, T8, T9> Composing9<E, T1, T2, T3, T4, T5, T6, T7, T8, T9> compose(
			Validation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,
			Validation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,
			Validation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9) {
		return new Composing9<>(v1, v2, v3, v4, v5, v6, v7, v8, v9);
	}

	public static <E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Composing10<E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> compose(
			Validation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,
			Validation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,
			Validation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,
			Validation<E, T10> v10) {
		return new Composing10<>(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10);
	}

	public static <R, E, T1> Validation<E, R> apply(Function1<T1, R> f,
			Validation<E, T1> v1) {
		return compose(v1).apply(f);
	}

	public static <R, E, T1, T2> Validation<E, R> apply(Function2<T1, T2, R> f,
			Validation<E, T1> v1, Validation<E, T2> v2) {
		return compose(v1, v2).apply(f);
	}

	public static <R, E, T1, T2, T3> Validation<E, R> apply(Function3<T1, T2, T3, R> f,
			Validation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3) {
		return compose(v1, v2, v3).apply(f);
	}

	public static <R, E, T1, T2, T3, T4> Validation<E, R> apply(
			Function4<T1, T2, T3, T4, R> f, Validation<E, T1> v1, Validation<E, T2> v2,
			Validation<E, T3> v3, Validation<E, T4> v4) {
		return compose(v1, v2, v3, v4).apply(f);
	}

	public static <R, E, T1, T2, T3, T4, T5> Validation<E, R> apply(
			Function5<T1, T2, T3, T4, T5, R> f, Validation<E, T1> v1,
			Validation<E, T2> v2, Validation<E, T3> v3, Validation<E, T4> v4,
			Validation<E, T5> v5) {
		return compose(v1, v2, v3, v4, v5).apply(f);
	}

	public static <R, E, T1, T2, T3, T4, T5, T6> Validation<E, R> apply(
			Function6<T1, T2, T3, T4, T5, T6, R> f, Validation<E, T1> v1,
			Validation<E, T2> v2, Validation<E, T3> v3, Validation<E, T4> v4,
			Validation<E, T5> v5, Validation<E, T6> v6) {
		return compose(v1, v2, v3, v4, v5, v6).apply(f);
	}

	public static <R, E, T1, T2, T3, T4, T5, T6, T7> Validation<E, R> apply(
			Function7<T1, T2, T3, T4, T5, T6, T7, R> f, Validation<E, T1> v1,
			Validation<E, T2> v2, Validation<E, T3> v3, Validation<E, T4> v4,
			Validation<E, T5> v5, Validation<E, T6> v6, Validation<E, T7> v7) {
		return compose(v1, v2, v3, v4, v5, v6, v7).apply(f);
	}

	public static <R, E, T1, T2, T3, T4, T5, T6, T7, T8> Validation<E, R> apply(
			Function8<T1, T2, T3, T4, T5, T6, T7, T8, R> f, Validation<E, T1> v1,
			Validation<E, T2> v2, Validation<E, T3> v3, Validation<E, T4> v4,
			Validation<E, T5> v5, Validation<E, T6> v6, Validation<E, T7> v7,
			Validation<E, T8> v8) {
		return compose(v1, v2, v3, v4, v5, v6, v7, v8).apply(f);
	}

	public static <R, E, T1, T2, T3, T4, T5, T6, T7, T8, T9> Validation<E, R> apply(
			Function9<T1, T2, T3, T4, T5, T6, T7, T8, T9, R> f, Validation<E, T1> v1,
			Validation<E, T2> v2, Validation<E, T3> v3, Validation<E, T4> v4,
			Validation<E, T5> v5, Validation<E, T6> v6, Validation<E, T7> v7,
			Validation<E, T8> v8, Validation<E, T9> v9) {
		return compose(v1, v2, v3, v4, v5, v6, v7, v8, v9).apply(f);
	}

	public static <R, E, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Validation<E, R> apply(
			Function10<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, R> f,
			Validation<E, T1> v1, Validation<E, T2> v2, Validation<E, T3> v3,
			Validation<E, T4> v4, Validation<E, T5> v5, Validation<E, T6> v6,
			Validation<E, T7> v7, Validation<E, T8> v8, Validation<E, T9> v9,
			Validation<E, T10> v10) {
		return compose(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10).apply(f);
	}

	public static <E, T> Validation<E, List<T>> sequence(
			Iterable<Validation<E, T>> validations) {
		final List<E> errors = new ArrayList<>();
		final List<T> values = new ArrayList<>();
		for (Validation<E, T> validation : validations) {
			if (!validation.isValid()) {
				errors.addAll(validation.errors());
			}
			else if (errors.isEmpty()) {
				values.add(validation.value());
			}
		}
		return errors.isEmpty() ? Validation.success(values) : Validation.failure(errors);
	}

	public static <E, T, U> Validation<E, List<U>> traverse(Iterable<T> values,
			Function<T, Validation<E, U>> mapper) {
		return sequence(StreamSupport.stream(values.spliterator(), false).map(mapper)
				.collect(Collectors.toList()));
	}
}
